// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String              @id @default(uuid())
  email                String              @unique
  name                 String
  password             String
  accounts             Account[]
  sessions             Session[]
  workspaces           Workspace[]         @relation("UserWorkspaces")
  workspaceDocuments   WorkspaceDocument[]
  workspaceMemberships WorkspaceMember[]   @relation("UserMemberships")
  uploadedDocuments    UploadedDocument[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Workspace {
  id                 String              @id @default(uuid())
  name               String
  description        String
  image              String?             @default("https://picsum.photos/200/300")
  workspaceEmoji     String
  userId             String
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserWorkspaces")
  members            WorkspaceMember[]
  workspaceDocuments WorkspaceDocument[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model UploadedDocument {
  id        String   @id @default(uuid())
  name      String?
  url       String?
  size      Int?
  type      String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkspaceDocument {
  id          String    @id @default(uuid())
  name        String
  content     String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  role        String    @default("member")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserMemberships")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}
